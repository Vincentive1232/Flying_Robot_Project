/* automatically generated by rust-bindgen 0.65.1 */
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
use core::option;

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const vec3d_size: u32 = 3;
pub const STABILIZER_NR_OF_MOTORS: u32 = 4;
pub const RATE_1000_HZ: u32 = 1000;
pub const RATE_500_HZ: u32 = 500;
pub const RATE_250_HZ: u32 = 250;
pub const RATE_100_HZ: u32 = 100;
pub const RATE_50_HZ: u32 = 50;
pub const RATE_25_HZ: u32 = 25;
pub const RATE_MAIN_LOOP: u32 = 1000;
pub const ATTITUDE_RATE: u32 = 500;
pub const POSITION_RATE: u32 = 100;
pub const RATE_HL_COMMANDER: u32 = 100;
pub const RATE_SUPERVISOR: u32 = 25;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;

#[cfg(target_pointer_width = "64")]
mod custom_c_types {
    pub type c_longlong = i64;
}

#[cfg(target_pointer_width = "32")]
mod custom_c_types {
    pub type c_longlong = i32;
}

pub use custom_c_types::c_longlong as intmax_t;

#[cfg(target_pointer_width = "64")]
pub type uintmax_t = u64;

#[cfg(target_pointer_width = "32")]
pub type uintmax_t = u32; 

#[repr(C)]
#[derive(Copy, Clone)]
pub union Axis3i16 {
    pub __bindgen_anon_1: Axis3i16__bindgen_ty_1,
    pub axis: [i16; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Axis3i16__bindgen_ty_1 {
    pub x: i16,
    pub y: i16,
    pub z: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Axis3i32 {
    pub __bindgen_anon_1: Axis3i32__bindgen_ty_1,
    pub axis: [i32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Axis3i32__bindgen_ty_1 {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Axis3i64 {
    pub __bindgen_anon_1: Axis3i64__bindgen_ty_1,
    pub axis: [i64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Axis3i64__bindgen_ty_1 {
    pub x: i64,
    pub y: i64,
    pub z: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Axis3f {
    pub __bindgen_anon_1: Axis3f__bindgen_ty_1,
    pub axis: [f32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Axis3f__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct lighthouseCalibrationSweep_t {
    pub phase: f32,
    pub tilt: f32,
    pub curve: f32,
    pub gibmag: f32,
    pub gibphase: f32,
    pub ogeemag: f32,
    pub ogeephase: f32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct lighthouseCalibration_t {
    pub sweep: [lighthouseCalibrationSweep_t; 2usize],
    pub uid: u32,
    pub valid: bool,
}
#[doc = " @brief Generic function pointer type for a calibration measurement model.\n        Predict the measured sweep angle based on a position for a lighthouse rotor. The position is relative to the rotor reference frame.\n @param x meters\n @param y meters\n @param z meters\n @param t Tilt of the light plane in radians\n @param calib Calibration data for the rotor\n @return float The predicted uncompensated sweep angle of the rotor\n"]
pub type lighthouseCalibrationMeasurementModel_t = option::Option<
    unsafe extern "C" fn(
        x: f32,
        y: f32,
        z: f32,
        t: f32,
        calib: *const lighthouseCalibrationSweep_t,
    ) -> f32,
>;
pub type stabilizerStep_t = u32;
#[doc = " Attitude in euler angle form"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attitude_s {
    pub timestamp: u32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
}
#[doc = " Attitude in euler angle form"]
pub type attitude_t = attitude_s;
pub type vec3d = [f32; 3usize];
pub type mat3d = [[f32; 3usize]; 3usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vec3_s {
    pub timestamp: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
pub type vector_t = vec3_s;
pub type point_t = vec3_s;
pub type velocity_t = vec3_s;
pub type acc_t = vec3_s;
pub type jerk_t = vec3_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quaternion_s {
    pub __bindgen_anon_1: quaternion_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union quaternion_s__bindgen_ty_1 {
    pub __bindgen_anon_1: quaternion_s__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: quaternion_s__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quaternion_s__bindgen_ty_1__bindgen_ty_1 {
    pub q0: f32,
    pub q1: f32,
    pub q2: f32,
    pub q3: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quaternion_s__bindgen_ty_1__bindgen_ty_2 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
pub type quaternion_t = quaternion_s;
pub const measurementSource_t_MeasurementSourceLocationService: measurementSource_t = 0;
pub const measurementSource_t_MeasurementSourceLighthouse: measurementSource_t = 0;
pub type measurementSource_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tdoaMeasurement_s {
    pub __bindgen_anon_1: tdoaMeasurement_s__bindgen_ty_1,
    pub __bindgen_anon_2: tdoaMeasurement_s__bindgen_ty_2,
    pub distanceDiff: f32,
    pub stdDev: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tdoaMeasurement_s__bindgen_ty_1 {
    pub anchorPositions: [point_t; 2usize],
    pub __bindgen_anon_1: tdoaMeasurement_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tdoaMeasurement_s__bindgen_ty_1__bindgen_ty_1 {
    pub anchorPositionA: point_t,
    pub anchorPositionB: point_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tdoaMeasurement_s__bindgen_ty_2 {
    pub anchorIds: [u8; 2usize],
    pub __bindgen_anon_1: tdoaMeasurement_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tdoaMeasurement_s__bindgen_ty_2__bindgen_ty_1 {
    pub anchorIdA: u8,
    pub anchorIdB: u8,
}
pub type tdoaMeasurement_t = tdoaMeasurement_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct baro_s {
    pub pressure: f32,
    pub temperature: f32,
    pub asl: f32,
}
pub type baro_t = baro_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct positionMeasurement_s {
    pub __bindgen_anon_1: positionMeasurement_s__bindgen_ty_1,
    pub stdDev: f32,
    pub source: measurementSource_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union positionMeasurement_s__bindgen_ty_1 {
    pub __bindgen_anon_1: positionMeasurement_s__bindgen_ty_1__bindgen_ty_1,
    pub pos: [f32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct positionMeasurement_s__bindgen_ty_1__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
pub type positionMeasurement_t = positionMeasurement_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct poseMeasurement_s {
    pub __bindgen_anon_1: poseMeasurement_s__bindgen_ty_1,
    pub quat: quaternion_t,
    pub stdDevPos: f32,
    pub stdDevQuat: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union poseMeasurement_s__bindgen_ty_1 {
    pub __bindgen_anon_1: poseMeasurement_s__bindgen_ty_1__bindgen_ty_1,
    pub pos: [f32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poseMeasurement_s__bindgen_ty_1__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
pub type poseMeasurement_t = poseMeasurement_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct distanceMeasurement_s {
    pub __bindgen_anon_1: distanceMeasurement_s__bindgen_ty_1,
    pub anchorId: u8,
    pub distance: f32,
    pub stdDev: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union distanceMeasurement_s__bindgen_ty_1 {
    pub __bindgen_anon_1: distanceMeasurement_s__bindgen_ty_1__bindgen_ty_1,
    pub pos: [f32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct distanceMeasurement_s__bindgen_ty_1__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
pub type distanceMeasurement_t = distanceMeasurement_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zDistance_s {
    pub timestamp: u32,
    pub distance: f32,
}
pub type zDistance_t = zDistance_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sensorData_s {
    pub acc: Axis3f,
    pub gyro: Axis3f,
    pub mag: Axis3f,
    pub baro: baro_t,
    pub interruptTimestamp: u64,
}
pub type sensorData_t = sensorData_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct state_s {
    pub attitude: attitude_t,
    pub attitudeQuaternion: quaternion_t,
    pub position: point_t,
    pub velocity: velocity_t,
    pub acc: acc_t,
}
pub type state_t = state_s;
pub const control_mode_e_controlModeLegacy: control_mode_e = 0;
pub const control_mode_e_controlModeForceTorque: control_mode_e = 1;
pub const control_mode_e_controlModeForce: control_mode_e = 2;
pub type control_mode_e = u32;
pub use self::control_mode_e as control_mode_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct control_s {
    pub __bindgen_anon_1: control_s__bindgen_ty_1,
    pub controlMode: control_mode_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union control_s__bindgen_ty_1 {
    pub __bindgen_anon_1: control_s__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: control_s__bindgen_ty_1__bindgen_ty_2,
    pub normalizedForces: [f32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct control_s__bindgen_ty_1__bindgen_ty_1 {
    pub roll: i16,
    pub pitch: i16,
    pub yaw: i16,
    pub thrust: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct control_s__bindgen_ty_1__bindgen_ty_2 {
    pub thrustSi: f32,
    pub __bindgen_anon_1: control_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union control_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub torque: [f32; 3usize],
    pub __bindgen_anon_1: control_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct control_s__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub torqueX: f32,
    pub torqueY: f32,
    pub torqueZ: f32,
}
pub type control_t = control_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub union motors_thrust_uncapped_t {
    pub list: [i32; 4usize],
    pub motors: motors_thrust_uncapped_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct motors_thrust_uncapped_t__bindgen_ty_1 {
    pub m1: i32,
    pub m2: i32,
    pub m3: i32,
    pub m4: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union motors_thrust_pwm_t {
    pub list: [u16; 4usize],
    pub motors: motors_thrust_pwm_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct motors_thrust_pwm_t__bindgen_ty_1 {
    pub m1: u16,
    pub m2: u16,
    pub m3: u16,
    pub m4: u16,
}
pub const mode_e_modeDisable: mode_e = 0;
pub const mode_e_modeAbs: mode_e = 1;
pub const mode_e_modeVelocity: mode_e = 2;
pub type mode_e = u32;
pub use self::mode_e as stab_mode_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct setpoint_s {
    pub timestamp: u32,
    pub attitude: attitude_t,
    pub attitudeRate: attitude_t,
    pub attitudeQuaternion: quaternion_t,
    pub thrust: f32,
    pub position: point_t,
    pub velocity: velocity_t,
    pub acceleration: acc_t,
    pub jerk: jerk_t,
    pub velocity_body: bool,
    pub mode: setpoint_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct setpoint_s__bindgen_ty_1 {
    pub x: stab_mode_t,
    pub y: stab_mode_t,
    pub z: stab_mode_t,
    pub roll: stab_mode_t,
    pub pitch: stab_mode_t,
    pub yaw: stab_mode_t,
    pub quat: stab_mode_t,
}
pub type setpoint_t = setpoint_s;
#[doc = " Estimate of position"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct estimate_s {
    pub timestamp: u32,
    pub position: point_t,
}
#[doc = " Estimate of position"]
pub type estimate_t = estimate_s;
#[doc = " Setpoint for althold"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct setpointZ_s {
    pub z: f32,
    pub isUpdate: bool,
}
#[doc = " Setpoint for althold"]
pub type setpointZ_t = setpointZ_s;
#[doc = " Flow measurement"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct flowMeasurement_s {
    pub timestamp: u32,
    pub __bindgen_anon_1: flowMeasurement_s__bindgen_ty_1,
    pub stdDevX: f32,
    pub stdDevY: f32,
    pub dt: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union flowMeasurement_s__bindgen_ty_1 {
    pub __bindgen_anon_1: flowMeasurement_s__bindgen_ty_1__bindgen_ty_1,
    pub dpixel: [f32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flowMeasurement_s__bindgen_ty_1__bindgen_ty_1 {
    pub dpixelx: f32,
    pub dpixely: f32,
}
#[doc = " Flow measurement"]
pub type flowMeasurement_t = flowMeasurement_s;
#[doc = " TOF measurement"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tofMeasurement_s {
    pub timestamp: u32,
    pub distance: f32,
    pub stdDev: f32,
}
#[doc = " TOF measurement"]
pub type tofMeasurement_t = tofMeasurement_s;
#[doc = " Absolute height measurement"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct heightMeasurement_s {
    pub timestamp: u32,
    pub height: f32,
    pub stdDev: f32,
}
#[doc = " Absolute height measurement"]
pub type heightMeasurement_t = heightMeasurement_s;
#[doc = " Yaw error measurement"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yawErrorMeasurement_t {
    pub timestamp: u32,
    pub yawError: f32,
    pub stdDev: f32,
}
#[doc = " Sweep angle measurement"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sweepAngleMeasurement_t {
    pub timestamp: u32,
    pub sensorPos: *const vec3d,
    pub rotorPos: *const vec3d,
    pub rotorRot: *const mat3d,
    pub rotorRotInv: *const mat3d,
    pub sensorId: u8,
    pub baseStationId: u8,
    pub sweepId: u8,
    pub t: f32,
    pub measuredSweepAngle: f32,
    pub stdDev: f32,
}
#[doc = " gyroscope measurement"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gyroscopeMeasurement_t {
    pub gyro: Axis3f,
}
#[doc = " accelerometer measurement"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct accelerationMeasurement_t {
    pub acc: Axis3f,
}
#[doc = " barometer measurement"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct barometerMeasurement_t {
    pub baro: baro_t,
}
